"use strict";(self.webpackChunkmixcraft_10_api_docs=self.webpackChunkmixcraft_10_api_docs||[]).push([[8328],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,k=p["".concat(s,".").concat(d)]||p[d]||c[d]||a;return n?o.createElement(k,l(l({ref:t},m),{},{components:n})):o.createElement(k,l({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},312:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:4},l=void 0,i={unversionedId:"API Sections/Mixcraft",id:"API Sections/Mixcraft",title:"Mixcraft",description:"The `Mixcraft` section covers functions and constants that allow access to the transport controls in Mixcraft.",source:"@site/docs/API Sections/Mixcraft.md",sourceDirName:"API Sections",slug:"/API Sections/Mixcraft",permalink:"/Mixcraft-10-API-docs/docs/API Sections/Mixcraft",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/API Sections/Mixcraft.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Track",permalink:"/Mixcraft-10-API-docs/docs/API Sections/Track"},next:{title:"MIDI",permalink:"/Mixcraft-10-API-docs/docs/API Sections/MIDI"}},s={},u=[{value:"Seek Constants",id:"seek-constants",level:2},{value:"SEEK_MAX",id:"seek_max",level:3},{value:"SEEK_NORMAL",id:"seek_normal",level:3},{value:"SEEK_TINY",id:"seek_tiny",level:3},{value:"Metronome Constants",id:"metronome-constants",level:2},{value:"METRONOME_PLAYBACK",id:"metronome_playback",level:3},{value:"METRONOME_RECORDING",id:"metronome_recording",level:3},{value:"METRONOME_RECORDINGCOUNTIN",id:"metronome_recordingcountin",level:3},{value:"METRONOME_ALL",id:"metronome_all",level:3},{value:"Functions",id:"functions",level:2},{value:"FastForward(SeekAmount)",id:"fastforwardseekamount",level:3},{value:"GetKey()",id:"getkey",level:3},{value:"GetLoopStart()",id:"getloopstart",level:3},{value:"GetLoopLength()",id:"getlooplength",level:3},{value:"GetMarkerName(index)",id:"getmarkernameindex",level:3},{value:"GetPlayPercentage()",id:"getplaypercentage",level:3},{value:"GetProjectLength()",id:"getprojectlength",level:3},{value:"GetTempo()",id:"gettempo",level:3},{value:"GetTime()",id:"gettime",level:3},{value:"GetTimeSignatureDenominator()",id:"gettimesignaturedenominator",level:3},{value:"GetTimeSignatureNumerator()",id:"gettimesignaturenumerator",level:3},{value:"IsLoopOn()",id:"isloopon",level:3},{value:"IsMetronomeOn(metronomeType)",id:"ismetronomeonmetronometype",level:3},{value:"IsPlaying()",id:"isplaying",level:3},{value:"NumMarkers()",id:"nummarkers",level:3},{value:"Play()",id:"play",level:3},{value:"Record()",id:"record",level:3},{value:"Redo()",id:"redo",level:3},{value:"Rewind(SeekAmount)",id:"rewindseekamount",level:3},{value:"Save()",id:"save",level:3},{value:"SeekToMarker(index)",id:"seektomarkerindex",level:3},{value:"SetKey(key (0-7)  )",id:"setkeykey-0-7--",level:3},{value:"SetLoopStart(startTime)",id:"setloopstartstarttime",level:3},{value:"SetLoopLength(length)",id:"setlooplengthlength",level:3},{value:"SetMetronome(metroType, state)",id:"setmetronomemetrotype-state",level:3},{value:"ShowLoop(bool)",id:"showloopbool",level:3}],m={toc:u},p="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Mixcraft")," section covers functions and constants that allow access to the transport controls in Mixcraft.  "),(0,r.kt)("h2",{id:"seek-constants"},"Seek Constants"),(0,r.kt)("h3",{id:"seek_max"},"SEEK_MAX"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"used in ",(0,r.kt)("inlineCode",{parentName:"li"},"Rewind()  ")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"FastForward()  ")," for maximum speed  ")),(0,r.kt)("h3",{id:"seek_normal"},"SEEK_NORMAL"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"used in ",(0,r.kt)("inlineCode",{parentName:"li"},"Rewind()  ")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"FastForward()  ")," for normal speed  ")),(0,r.kt)("h3",{id:"seek_tiny"},"SEEK_TINY"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"used in ",(0,r.kt)("inlineCode",{parentName:"li"},"Rewind()  ")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"FastForward()  ")," for slow speed  ")),(0,r.kt)("h2",{id:"metronome-constants"},"Metronome Constants"),(0,r.kt)("h3",{id:"metronome_playback"},"METRONOME_PLAYBACK"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"play the metronome only during playback")),(0,r.kt)("h3",{id:"metronome_recording"},"METRONOME_RECORDING"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"play the metronome only during recording")),(0,r.kt)("h3",{id:"metronome_recordingcountin"},"METRONOME_RECORDINGCOUNTIN"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"play the metronome only for count the defined count-in measures (measures defined via GUI dialog box)")),(0,r.kt)("h3",{id:"metronome_all"},"METRONOME_ALL"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"enable all of the above metronome types")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"fastforwardseekamount"},"FastForward(SeekAmount)"),(0,r.kt)("p",null,"This function forwards the playhead by the specified SeekAmount (see seek constants above)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"SeekAmount")," (float): ",(0,r.kt)("em",{parentName:"li"},"the amount of time (in seconds) to forward the playhead"))),(0,r.kt)("h3",{id:"getkey"},"GetKey()"),(0,r.kt)("p",null,"This function returns the current key of the project, represented by an integer between 0 and 7."),(0,r.kt)("h3",{id:"getloopstart"},"GetLoopStart()"),(0,r.kt)("p",null,"This function returns the loop start time."),(0,r.kt)("h3",{id:"getlooplength"},"GetLoopLength()"),(0,r.kt)("p",null,"This function returns the length of the loop."),(0,r.kt)("h3",{id:"getmarkernameindex"},"GetMarkerName(index)"),(0,r.kt)("p",null,"This function returns the name of the marker at the specified index."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"index")," (int): ",(0,r.kt)("em",{parentName:"li"},"the index of the marker to get the name of"))),(0,r.kt)("h3",{id:"getplaypercentage"},"GetPlayPercentage()"),(0,r.kt)("p",null,"This function returns an integer value between 1 and 100, representing the percentage of the project that has been played, calculated from the current playhead position."),(0,r.kt)("h3",{id:"getprojectlength"},"GetProjectLength()"),(0,r.kt)("p",null,"This function returns the total length of the project in beats or time."),(0,r.kt)("h3",{id:"gettempo"},"GetTempo()"),(0,r.kt)("p",null,"This function gets the project's tempo."),(0,r.kt)("h3",{id:"gettime"},"GetTime()"),(0,r.kt)("p",null,"This function returns the current playhead time in the project."),(0,r.kt)("h3",{id:"gettimesignaturedenominator"},"GetTimeSignatureDenominator()"),(0,r.kt)("p",null,"This function returns the denominator of the project's time signature."),(0,r.kt)("h3",{id:"gettimesignaturenumerator"},"GetTimeSignatureNumerator()"),(0,r.kt)("p",null,"This function returns the numerator of the project's time signature."),(0,r.kt)("h3",{id:"isloopon"},"IsLoopOn()"),(0,r.kt)("p",null,"This function returns a boolean value indicating whether the loop is enabled."),(0,r.kt)("h3",{id:"ismetronomeonmetronometype"},"IsMetronomeOn(metronomeType)"),(0,r.kt)("p",null,"This function returns a boolean value indicating whether the specified metronome type is enabled. (see metronome types above)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"metronomeType")," (string): ",(0,r.kt)("em",{parentName:"li"},"the type of metronome to check the status of"))),(0,r.kt)("h3",{id:"isplaying"},"IsPlaying()"),(0,r.kt)("p",null,"This function returns a boolean value that indicates whether the DAW is currently playing."),(0,r.kt)("h3",{id:"nummarkers"},"NumMarkers()"),(0,r.kt)("p",null,"This function returns the number of markers in the project."),(0,r.kt)("h3",{id:"play"},"Play()"),(0,r.kt)("p",null,"This function starts playback from the current playhead position."),(0,r.kt)("h3",{id:"record"},"Record()"),(0,r.kt)("p",null,"This function starts the recording process in Mixcraft."),(0,r.kt)("h3",{id:"redo"},"Redo()"),(0,r.kt)("p",null,"This function redoes the last action performed in Mixcraft."),(0,r.kt)("h3",{id:"rewindseekamount"},"Rewind(SeekAmount)"),(0,r.kt)("p",null,"This function rewinds the playhead by the specified SeekAmount (see seek constants above)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"SeekAmount")," (float): ",(0,r.kt)("em",{parentName:"li"},"the amount of time (in seconds) to rewind the playhead"))),(0,r.kt)("h3",{id:"save"},"Save()"),(0,r.kt)("p",null,"This function saves the current state of the project."),(0,r.kt)("h3",{id:"seektomarkerindex"},"SeekToMarker(index)"),(0,r.kt)("p",null,"This function sets the playhead to the specified marker index."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"index")," (int): ",(0,r.kt)("em",{parentName:"li"},"the index of the marker to seek to"))),(0,r.kt)("h3",{id:"setkeykey-0-7--"},"SetKey(key (0-7)  )"),(0,r.kt)("p",null,"This function sets the project's key to the specified value, represented by an integer between 0 and 7."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"key")," (int): ",(0,r.kt)("em",{parentName:"li"},"an integer representing the key (0-7) to set for the project"))),(0,r.kt)("h3",{id:"setloopstartstarttime"},"SetLoopStart(startTime)"),(0,r.kt)("p",null,"This function sets the loop start time."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"startTime")," (float): ",(0,r.kt)("em",{parentName:"li"},"a number representing the time (in seconds)"))),(0,r.kt)("h3",{id:"setlooplengthlength"},"SetLoopLength(length)"),(0,r.kt)("p",null,"This function sets the length of the loop."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"length")," (float): ",(0,r.kt)("em",{parentName:"li"},"a number representing the time (in seconds)"))),(0,r.kt)("h3",{id:"setmetronomemetrotype-state"},"SetMetronome(metroType, state)"),(0,r.kt)("p",null,"A function that sets the metronome type and toggles the on/off state."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"metroType")," (CONST): one of the available metronome types as listed above in Metronome Constants.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"state")," (bool): the on or off state for the metronome."))),(0,r.kt)("h3",{id:"showloopbool"},"ShowLoop(bool)"),(0,r.kt)("p",null,"This function toggles the loop GUI indicators."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"bool")," (bool): ",(0,r.kt)("em",{parentName:"li"},"a true or false value that sets the state for the loop region indicator in eth GUI"))))}c.isMDXComponent=!0}}]);