"use strict";(self.webpackChunkmixcraft_10_api_docs=self.webpackChunkmixcraft_10_api_docs||[]).push([[8328],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),m=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=m(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},k=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=m(n),k=r,h=u["".concat(s,".").concat(k)]||u[k]||d[k]||l;return n?o.createElement(h,a(a({ref:t},p),{},{components:n})):o.createElement(h,a({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,a=new Array(l);a[0]=k;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,a[1]=i;for(var m=2;m<l;m++)a[m]=n[m];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}k.displayName="MDXCreateElement"},312:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var o=n(7462),r=(n(7294),n(3905));const l={sidebar_position:4},a=void 0,i={unversionedId:"API Sections/Mixcraft",id:"API Sections/Mixcraft",title:"Mixcraft",description:"The `Mixcraft` section covers functions and properties that allow access to the transport controls in Mixcraft.",source:"@site/docs/API Sections/Mixcraft.md",sourceDirName:"API Sections",slug:"/API Sections/Mixcraft",permalink:"/controller-script-api-docs/docs/API Sections/Mixcraft",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Track",permalink:"/controller-script-api-docs/docs/API Sections/Track"},next:{title:"MIDI",permalink:"/controller-script-api-docs/docs/API Sections/MIDI"}},s={},m=[{value:"Seek properties",id:"seek-properties",level:2},{value:"SEEK_MAX",id:"seek_max",level:3},{value:"SEEK_NORMAL",id:"seek_normal",level:3},{value:"SEEK_TINY",id:"seek_tiny",level:3},{value:"Metronome properties",id:"metronome-properties",level:2},{value:"METRONOME_PLAYBACK",id:"metronome_playback",level:3},{value:"METRONOME_RECORDING",id:"metronome_recording",level:3},{value:"METRONOME_RECORDINGCOUNTIN",id:"metronome_recordingcountin",level:3},{value:"METRONOME_ALL",id:"metronome_all",level:3},{value:"Functions",id:"functions",level:2},{value:"AddMarker(time)",id:"addmarkertime",level:3},{value:"FastForward(seekAmount)",id:"fastforwardseekamount",level:3},{value:"GetKey()",id:"getkey",level:3},{value:"GetLoopStart()",id:"getloopstart",level:3},{value:"GetLoopLength()",id:"getlooplength",level:3},{value:"GetMarkerName(index)",id:"getmarkernameindex",level:3},{value:"GetPlayPercentage()",id:"getplaypercentage",level:3},{value:"GetProjectLength()",id:"getprojectlength",level:3},{value:"GetTempo()",id:"gettempo",level:3},{value:"GetTime()",id:"gettime",level:3},{value:"GetTimeSignatureDenominator()",id:"gettimesignaturedenominator",level:3},{value:"GetTimeSignatureNumerator()",id:"gettimesignaturenumerator",level:3},{value:"IsLoopOn()",id:"isloopon",level:3},{value:"IsMetronomeOn(metronomeType)",id:"ismetronomeonmetronometype",level:3},{value:"IsPlaying()",id:"isplaying",level:3},{value:"NumMarkers()",id:"nummarkers",level:3},{value:"Play()",id:"play",level:3},{value:"Record()",id:"record",level:3},{value:"Redo()",id:"redo",level:3},{value:"Rewind(seekAmount)",id:"rewindseekamount",level:3},{value:"Save()",id:"save",level:3},{value:"SeekToMarker(index)",id:"seektomarkerindex",level:3},{value:"SetKey(key (0-7)  )",id:"setkeykey-0-7--",level:3},{value:"SetLoopStart(start)",id:"setloopstartstart",level:3},{value:"SetLoopLength(length)",id:"setlooplengthlength",level:3},{value:"SetMetronome(metroType, state)",id:"setmetronomemetrotype-state",level:3},{value:"SetTempo(tempo)",id:"settempotempo",level:3},{value:"SetTime(time)",id:"settimetime",level:3},{value:"SetTimeSignature(numerator, denominator)",id:"settimesignaturenumerator-denominator",level:3},{value:"ShowLoop(bool)",id:"showloopbool",level:3},{value:"TogglePlay()",id:"toggleplay",level:3},{value:"Undo()",id:"undo",level:3},{value:"ZoomHorizontal(val)",id:"zoomhorizontalval",level:3},{value:"ZoomVertical(val)",id:"zoomverticalval",level:3}],p={toc:m},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Mixcraft")," section covers functions and properties that allow access to the transport controls in Mixcraft.  "),(0,r.kt)("h2",{id:"seek-properties"},"Seek properties"),(0,r.kt)("h3",{id:"seek_max"},"SEEK_MAX"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"used in ",(0,r.kt)("inlineCode",{parentName:"li"},"Rewind()  ")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"FastForward()  ")," for maximum speed  ")),(0,r.kt)("h3",{id:"seek_normal"},"SEEK_NORMAL"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"used in ",(0,r.kt)("inlineCode",{parentName:"li"},"Rewind()  ")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"FastForward()  ")," for normal speed  ")),(0,r.kt)("h3",{id:"seek_tiny"},"SEEK_TINY"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"used in ",(0,r.kt)("inlineCode",{parentName:"li"},"Rewind()  ")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"FastForward()  ")," for slow speed  ")),(0,r.kt)("h2",{id:"metronome-properties"},"Metronome properties"),(0,r.kt)("h3",{id:"metronome_playback"},"METRONOME_PLAYBACK"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"play the metronome only during playback")),(0,r.kt)("h3",{id:"metronome_recording"},"METRONOME_RECORDING"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"play the metronome only during recording")),(0,r.kt)("h3",{id:"metronome_recordingcountin"},"METRONOME_RECORDINGCOUNTIN"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"play the metronome only for count the defined count-in measures (measures defined via GUI dialog box)")),(0,r.kt)("h3",{id:"metronome_all"},"METRONOME_ALL"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"enable all of the above metronome types")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"addmarkertime"},"AddMarker(time)"),(0,r.kt)("p",null,"This function adds a marker to the project at the specified time."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"time")," (float): ",(0,r.kt)("em",{parentName:"li"},"the time (in milliseconds) to set the marker on the timeline"))),(0,r.kt)("h3",{id:"fastforwardseekamount"},"FastForward(seekAmount)"),(0,r.kt)("p",null,"This function forwards the playhead by the specified SeekAmount (see ",(0,r.kt)("a",{parentName:"p",href:"#seek-properties"},"seek properties")," above)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"seekAmount")," (float): ",(0,r.kt)("em",{parentName:"li"},"the amount of time (in seconds) to forward the playhead"))),(0,r.kt)("h3",{id:"getkey"},"GetKey()"),(0,r.kt)("p",null,"This function returns the current key of the project, represented by an integer between 0 and 7."),(0,r.kt)("h3",{id:"getloopstart"},"GetLoopStart()"),(0,r.kt)("p",null,"This function returns the loop start time."),(0,r.kt)("h3",{id:"getlooplength"},"GetLoopLength()"),(0,r.kt)("p",null,"This function returns the length of the loop."),(0,r.kt)("h3",{id:"getmarkernameindex"},"GetMarkerName(index)"),(0,r.kt)("p",null,"This function returns the name of the marker at the specified index."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"index")," (int): ",(0,r.kt)("em",{parentName:"li"},"the index of the marker to get the name of"))),(0,r.kt)("h3",{id:"getplaypercentage"},"GetPlayPercentage()"),(0,r.kt)("p",null,"This function returns an integer value between 1 and 100, representing the percentage of the project that has been played, calculated from the current playhead position."),(0,r.kt)("h3",{id:"getprojectlength"},"GetProjectLength()"),(0,r.kt)("p",null,"This function returns the total length of the project in beats or time."),(0,r.kt)("h3",{id:"gettempo"},"GetTempo()"),(0,r.kt)("p",null,"This function returns a float value of the project's tempo in beats per minute."),(0,r.kt)("h3",{id:"gettime"},"GetTime()"),(0,r.kt)("p",null,"This function returns the current playhead time in the project."),(0,r.kt)("h3",{id:"gettimesignaturedenominator"},"GetTimeSignatureDenominator()"),(0,r.kt)("p",null,"This function returns an int value of the project's time signature denominator."),(0,r.kt)("h3",{id:"gettimesignaturenumerator"},"GetTimeSignatureNumerator()"),(0,r.kt)("p",null,"This function returns an int value of the project's time signature numerator."),(0,r.kt)("h3",{id:"isloopon"},"IsLoopOn()"),(0,r.kt)("p",null,"This function returns a boolean value indicating whether the loop is enabled."),(0,r.kt)("h3",{id:"ismetronomeonmetronometype"},"IsMetronomeOn(metronomeType)"),(0,r.kt)("p",null,"This function returns a boolean value indicating whether the specified metronome type is enabled. (see metronome types above)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"metronomeType")," (string): ",(0,r.kt)("em",{parentName:"li"},"the type of metronome to check the status of"))),(0,r.kt)("h3",{id:"isplaying"},"IsPlaying()"),(0,r.kt)("p",null,"This function returns a boolean value that indicates whether the DAW is currently playing."),(0,r.kt)("h3",{id:"nummarkers"},"NumMarkers()"),(0,r.kt)("p",null,"This function returns the number of markers in the project."),(0,r.kt)("h3",{id:"play"},"Play()"),(0,r.kt)("p",null,"This function starts playback from the current playhead position."),(0,r.kt)("h3",{id:"record"},"Record()"),(0,r.kt)("p",null,"This function starts the recording process in Mixcraft."),(0,r.kt)("h3",{id:"redo"},"Redo()"),(0,r.kt)("p",null,"This function redoes the last action performed in Mixcraft."),(0,r.kt)("h3",{id:"rewindseekamount"},"Rewind(seekAmount)"),(0,r.kt)("p",null,"This function rewinds the playhead by the specified SeekAmount (see ",(0,r.kt)("a",{parentName:"p",href:"#seek-properties"},"seek properties")," above)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"seekAmount")," (float): ",(0,r.kt)("em",{parentName:"li"},"the amount of time (in seconds) to rewind the playhead"))),(0,r.kt)("h3",{id:"save"},"Save()"),(0,r.kt)("p",null,"This function saves the current state of the project."),(0,r.kt)("h3",{id:"seektomarkerindex"},"SeekToMarker(index)"),(0,r.kt)("p",null,"This function sets the playhead to the specified marker index."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"index")," (int): ",(0,r.kt)("em",{parentName:"li"},"the index of the marker to seek to"))),(0,r.kt)("h3",{id:"setkeykey-0-7--"},"SetKey(key (0-7)  )"),(0,r.kt)("p",null,"This function sets the project's key to the specified value, represented by an integer between 0 and 7."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"key")," (int): ",(0,r.kt)("em",{parentName:"li"},"an integer representing the key (0-7) to set for the project"))),(0,r.kt)("h3",{id:"setloopstartstart"},"SetLoopStart(start)"),(0,r.kt)("p",null,"This function sets the loop start time."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"start")," (float): ",(0,r.kt)("em",{parentName:"li"},"a number representing the bar the loop starts on"))),(0,r.kt)("h3",{id:"setlooplengthlength"},"SetLoopLength(length)"),(0,r.kt)("p",null,"This function sets the length of the loop."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"length")," (float): ",(0,r.kt)("em",{parentName:"li"},"a number representing the number of bars the loop is set to"))),(0,r.kt)("h3",{id:"setmetronomemetrotype-state"},"SetMetronome(metroType, state)"),(0,r.kt)("p",null,"This function that sets the metronome type and toggles the on/off state."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"metroType")," (CONST): one of the available metronome types as listed above in ",(0,r.kt)("a",{parentName:"p",href:"#metronome-properties"},"metronome properties")," above.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"state")," (bool): the on or off state for the metronome."))),(0,r.kt)("h3",{id:"settempotempo"},"SetTempo(tempo)"),(0,r.kt)("p",null,"This function sets the tempo."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"tempo")," (float): ",(0,r.kt)("em",{parentName:"li"},"a number representing the tempo in beats per minute"))),(0,r.kt)("h3",{id:"settimetime"},"SetTime(time)"),(0,r.kt)("p",null,"This function sets the location of the playhead on the timeline."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"time")," (float): ",(0,r.kt)("em",{parentName:"li"},"the location in milliseconds to set the time of the playhead"))),(0,r.kt)("h3",{id:"settimesignaturenumerator-denominator"},"SetTimeSignature(numerator, denominator)"),(0,r.kt)("p",null,"This function sets the location of the playhead on the timeline."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"numerator")," (int): ",(0,r.kt)("em",{parentName:"li"},"the numerator value of teh time signature")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"denominator")," (int): ",(0,r.kt)("em",{parentName:"li"},"the denominator value of teh time signature"))),(0,r.kt)("h3",{id:"showloopbool"},"ShowLoop(bool)"),(0,r.kt)("p",null,"This function toggles the loop GUI indicators."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"bool")," (bool): ",(0,r.kt)("em",{parentName:"li"},"a true or false value that sets the state for the loop region indicator in the GUI"))),(0,r.kt)("h3",{id:"toggleplay"},"TogglePlay()"),(0,r.kt)("p",null,"This function toggles the play state between playing and stopped."),(0,r.kt)("h3",{id:"undo"},"Undo()"),(0,r.kt)("p",null,"This function reverts to the last undo state in memory."),(0,r.kt)("h3",{id:"zoomhorizontalval"},"ZoomHorizontal(val)"),(0,r.kt)("p",null,"This function controls the horizontal zoom value in Mixcraft."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"val")," (double): ",(0,r.kt)("em",{parentName:"li"},"the horizontal zoom value between 0 to 1.0."))),(0,r.kt)("h3",{id:"zoomverticalval"},"ZoomVertical(val)"),(0,r.kt)("p",null,"This function controls the vertical zoom value in Mixcraft."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"val")," (double): ",(0,r.kt)("em",{parentName:"li"},"the vertical zoom value between 0 to 1.0."))))}d.isMDXComponent=!0}}]);